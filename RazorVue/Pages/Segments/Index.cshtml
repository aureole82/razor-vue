@page "{listId:int}"
@model IndexModel

@{
    ViewBag.Title = $"Segments of list#{RouteData.Values["listId"]}";
}

<div id="app"></div>

@section Scripts {

    <partial name="_SegmentListItem"/>
    <partial name="_SegmentEdit"/>

    <script type="text/html" id="app-template">
        <div class="row">
            <div class="col-md-6 col-lg-4">
                <ul class="list-group">
                    <segment-list-item v-for="segment in list.segments" :key="segment.id"
                                       :segment="segment"
                                       v-on:segmentSelected="selectSegment($event)"
                                       :isSelected="currentSegment.id===segment.id">
                    </segment-list-item>
                </ul>
            </div>
            <div class="col-md-6 col-lg-8">
                <div class="row">
                    <div class="col-12 order-1 col-lg-6 order-lg-0" style="max-width: 25rem">
                        <div class="row">
                            <div class="col">
                                <video controls class="w-100"
                                       ref="videoplayer"
                                       :currentTime="currentTime"
                                       v-on:timeupdate="currentPosition = $event.target.currentTime">
                                    <source src="https://cdn.videvo.net/videvo_files/video/free/2018-09/large_watermarked/180824_TheEarth_35_graded_preview.mp4" type="video/mp4">
                                    Sorry, your browser doesn't support embedded videos.
                                </video>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                <button v-on:click="selectPreviousSegment">
                                    <i class="fa-solid fa-backward-fast"></i>
                                </button>
                                <button v-on:click="$refs.videoplayer.currentTime-=1">
                                    <i class="fa-solid fa-backward"></i>
                                </button>
                                <button v-on:click="$refs.videoplayer.currentTime-=1/29.97">
                                    <i class="fa-solid fa-caret-left"></i>
                                </button>
                            </div>
                            <div class="col text-end">
                                <button v-on:click="$refs.videoplayer.currentTime+=1/29.97">
                                    <i class="fa-solid fa-caret-right"></i>
                                </button>
                                <button v-on:click="$refs.videoplayer.currentTime+=1">
                                    <i class="fa-solid fa-forward"></i>
                                </button>
                                <button v-on:click="selectNextSegment">
                                    <i class="fa-solid fa-forward-fast"></i>
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">0</div>
                            <div class="col text-center">{{formatToTime(currentPosition)}}</div>
                            <div class="col text-end">{{list.duration}}</div>
                        </div>
                    </div>
                    <div class="col-12 order-0 col-lg-6 order-lg-1 border-start">
                        <h5>{{list.broadcastTitle}}</h5>
                        <h2>{{list.title}}</h2>
                        <div class="mt-auto">
                            <span class="align-self-end">
                                <i class="fa-solid fa-calendar-day"></i> {{formatToData(list.broadcastDay)}} &nbsp;
                                <i class="fa-solid fa-stopwatch"></i> {{list.duration}} &nbsp;
                                <i class="fa-solid fa-coins"></i> {{list.costCenter}}
                            </span>
                        </div>
                    </div>
                </div>
                <hr/>
                <segment-edit v-if="currentSegment" :segment="{...currentSegment}" v-on:segmentEdited="editSegment($event)"></segment-edit>
            </div>
        </div>
    </script>
    <script type="text/javascript">
        const url = '@Url.ActionLink("GetSegments", "Lists", new { id = RouteData.Values["listId"] })';
        const { createApp } = Vue;

        function getSeconds(start, length) {
            const timestamp = new Date(`1970-01-01T${start}`);
            return (timestamp.getHours() * 60 + timestamp.getMinutes()) * 60 + timestamp.getSeconds() + (length ?? 0);
        }

        const app = createApp({
            template: '#app-template',
            components: {
                'segment-edit': SegmentEdit,
                'segment-list-item': SegmentListItem
            },
            computed: {
                currentSegment() {
                    if (!this.list?.segments?.length) return undefined;

                    const index = this.getIndex(this.currentPosition);
                    return this.list.segments[index];
                }
            },
            data() {
                return {
                    currentTime: 0, // For videoplayer only: Synchronized along currentPosition. Don't set manually!
                    currentPosition: 0,
                    list: {},
                    totalLength: 0
                };
            },
            mounted() {
                try {
                    fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            data.segments.forEach(segment => segment.materialId = segment.materialId ?? "");
                            this.list = data;
                        });
                } catch (error) {
                    console.log(error);
                }
            },
            methods: {
                async editSegment(segment) {
                    const response = await fetch(
                        `/api/Segments/${segment.id}`,
                        {
                            method: "put",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(segment)
                        }
                    );
                    if (response.status === 200) {
                        const old = this.list.segments.find(current => current.id === segment.id);
                        const currentIndex = this.list.segments.indexOf(old);
                        const stored = await response.json();
                        this.list.segments[currentIndex] = stored;
                    }
                },
                formatToTime(position) {
                    const timestamp = new Date(`1970-01-01T00:00:00`);
                    timestamp.setMilliseconds(position * 1000);
                    return `${timestamp.getHours()}:${timestamp.getMinutes()}:${timestamp.getSeconds()}.${timestamp.getMilliseconds()}`;
                },
                formatToData(date) {
                    const timestamp = new Date(date);
                    return `${timestamp.toLocaleDateString()}`;
                },
                selectPreviousSegment() {
                    const index = this.getIndex(this.currentPosition);
                    if (index > 0) {
                        // Change currentPosition here won't seek the videoplayer as long as it's playing. So setting it directly helps (and updates currentPosition afterwards).
                        this.$refs.videoplayer.currentTime = getSeconds(this.list.segments[index - 1].start);
                    }
                },
                selectNextSegment() {
                    const index = this.getIndex(this.currentPosition);
                    if (this.list.segments.length > index + 1) {
                        // Change currentPosition here won't seek the videoplayer as long as it's playing. So setting it directly helps (and updates currentPosition afterwards).
                        this.$refs.videoplayer.currentTime = getSeconds(this.list.segments[index + 1].start);
                    }
                },
                selectSegment(id) {
                    //console.log("Index.selectSegment", id);
                    const segment = this.list.segments.find(segment => segment.id === id);
                    // Change currentPosition here won't seek the videoplayer as long as it's playing. So setting it directly helps (and updates currentPosition afterwards).
                    this.$refs.videoplayer.currentTime = getSeconds(segment.start);
                },
                // Private methods.
                getIndex(position) {
                    let lastIndex = 0;
                    for (let index = 0; index < this.list.segments.length; index++) {
                        const start = getSeconds(this.list.segments[index].start);
                        if (position < start) return lastIndex;

                        lastIndex = index;
                    }
                    return lastIndex;
                }
            },
            watch: {
                currentPosition() {
                    //console.log("Index.selectSegment", this.$refs.videoplayer.paused, this.currentPosition, this.currentTime);
                    if (this.$refs.videoplayer.paused) {
                        this.currentTime = this.currentPosition;
                    }
                }
            }
        });

        app.mount('#app');
    </script>


    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}