@page "{listId:int}"
@model IndexModel

@{
    ViewBag.Title = $"Segments of list#{RouteData.Values["listId"]}";
}
<h1>@ViewBag.Title</h1>

<div id="app"></div>

@section Scripts {

    <partial name="_SegmentListItem" />
    <partial name="_SegmentCreate" />
    <partial name="_SegmentEdit" />

    <script type="text/x-template" id="app-template">
        <div class="row">
            <div class="col-md-9 col-12">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Start</th>
                            <th>Length (in seconds)</th>
                            <th>Description</th>
                            <th>Type</th>
                            <th>Rights</th>
                            <th>Material</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <segment-list-item v-for="segment in segments" :key="segment.id" :segment="segment" v-on:segmentDeleted="deleteSegment($event)"></segment-list-item>
                    </tbody>
                </table>
            </div>
            <div class="col-md-3 col-12">
                <segment-edit v-on:segmentEdited="editSegment($event)" :segment="currentSegment"></segment-edit>
            </div>
        </div>
        <hr />
        <p>
            <segment-create v-on:segmentCreated="createSegment($event)"></segment-create>
        </p>
    </script>
    <script type="text/javascript">
        const url = '@Url.ActionLink("GetSegments", "Lists", new { id = RouteData.Values["listId"] })';
        const { createApp } = Vue;

        const app = createApp({
            template: '#app-template',
            components: {
                'segment-create': SegmentCreate,
                'segment-edit': SegmentEdit,
                'segment-list-item': SegmentListItem
            },
            data() {
                return {
                    currentSegment: {},
                    segments: []
                };
            },
            async mounted() {
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    this.segments = data;
                    this.currentSegment = this.segments[1];
                } catch (error) {
                    console.log(error);
                }
            },
            methods: {
                async createSegment(segment) {
                    const response = await fetch(
                        "/api/Segments",
                        {
                            method: "post",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(segment)
                        }
                    );
                    const stored = await response.json();
                    console.log(stored);
                    this.segments.push(stored);
                },
                async editSegment(segment) {
                    const response = await fetch(
                        "/api/Segments",
                        {
                            method: "put",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(segment)
                        }
                    );
                    const stored = await response.json();
                    console.log(stored);
                },
                async deleteSegment(id) {
                    const response = await fetch(
                        `/api/Segments/${id}`,
                        {
                            method: "delete"
                        }
                    );
                    if (response.status === 204) {
                        this.segments = this.segments.filter(segment => segment.id !== id);
                    }
                }
            }
        });

        app.mount('#app');
    </script>
}