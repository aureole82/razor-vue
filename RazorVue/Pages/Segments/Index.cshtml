@page "{listId:int}"
@model IndexModel

@{
    ViewBag.Title = $"Segments of list#{RouteData.Values["listId"]}";
}
<h1>@ViewBag.Title</h1>

<div id="app"></div>

@section Scripts {

    <partial name="_SegmentListItem" />
    <partial name="_SegmentCreate" />
    <partial name="_SegmentEdit" />

    <script type="text/html" id="app-template">
        <div class="row">
            <div class="col-md-9 col-12">
                <table class="table table-hover">
                    <thead>
                    <tr>
                        <th>Start</th>
                        <th>Length (in seconds)</th>
                        <th>Description</th>
                        <th>Type</th>
                        <th>Rights</th>
                        <th>Material</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    <segment-list-item v-for="segment in segments" :key="segment.id"
                               :segment="segment"
                               v-on:segmentDeleted="deleteSegment($event)"
                               v-on:segmentSelected="selectSegment($event)"
                               :isSelected="currentSegment.id===segment.id"></segment-list-item>
                    </tbody>
                </table>
            </div>
            <div class="col-md-3 col-12">
                <input type="range" min="0" :max="totalLength" :value="currentPosition" class="slider w-100">
                <div class="row"><div class="col">0</div><div class="col text-center">{{currentPosition}}</div><div class="col text-end">{{totalLength}}</div></div>
                <segment-edit v-if="currentSegment" :segment="currentSegment" v-on:segmentEdited="editSegment($event)"></segment-edit>
            </div>
        </div>
        <hr />
        <p>
            <segment-create v-on:segmentCreated="createSegment($event)"></segment-create>
        </p>
    </script>
    <script type="text/javascript">
        const url = '@Url.ActionLink("GetSegments", "Lists", new { id = RouteData.Values["listId"] })';
        const { createApp } = Vue;
        function getSeconds(start, length) {
            const timestamp = new Date('1970-01-01T' + start);
            return (timestamp.getHours() * 60 + timestamp.getMinutes()) * 60 + timestamp.getSeconds() + (length ?? 0);
        }

        const app = createApp({
            template: '#app-template',
            components: {
                'segment-create': SegmentCreate,
                'segment-edit': SegmentEdit,
                'segment-list-item': SegmentListItem
            },
            computed: {
                currentPosition() {
                    if (!this.currentSegment) return 0;

                    return getSeconds(this.currentSegment.start);
                },
                currentSegment() {
                    if (!this.segments.length) return undefined;

                    return this.segments[this.currentIndex];
                }
            },
            data() {
                return {
                    currentIndex: 0,
                    segments: [],
                    totalLength: 0
                };
            },
            mounted() {
                try {
                    fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            this.segments = data;
                            this.currentIndex = 1;
                            const lastSegment = this.segments.at(-1);
                            this.totalLength = getSeconds(lastSegment.start, lastSegment.length);
                        });
                } catch (error) {
                    console.log(error);
                }
            },
            methods: {
                async createSegment(segment) {
                    const response = await fetch(
                        "/api/Segments",
                        {
                            method: "post",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(segment)
                        }
                    );
                    const stored = await response.json();
                    this.segments.push(stored);
                },
                async editSegment(segment) {
                    const response = await fetch(
                        "/api/Segments",
                        {
                            method: "put",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(segment)
                        }
                    );
                },
                selectSegment(id) {
                    const segment = this.segments.find(segment => segment.id === id);
                    this.currentIndex = this.segments.indexOf(segment);
                },
                async deleteSegment(id) {
                    const response = await fetch(
                        `/api/Segments/${id}`,
                        {
                            method: "delete"
                        }
                    );
                    if (response.status === 204) {
                        this.segments = this.segments.filter(segment => segment.id !== id);
                    }
                }
            }
        });

        app.mount('#app');
    </script>
}